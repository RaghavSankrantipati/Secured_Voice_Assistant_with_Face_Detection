#!/usr/bin/env python
""" This Project1.py script is build to act as a simple thermostat and humidity sensor. The functionality present in
this simple thermostat is that it allows for the request of temperature and pressure, it retrieves temp/humidity
values periodically and stores it to calculate the mean over time. This simple thermostat also has an alarm i.e. a
Warning Box pops up if the temperature or humidity is outside the permissible limits"""


import sys
import http.client, urllib.request, urllib.parse, urllib.error, requests
import base64, json

#Importing Python Standard Libraries
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QTabWidget, QVBoxLayout, QMessageBox, QLabel, QSizePolicy
from PyQt5.QtGui import QIcon, QPixmap

#from PyQt5 import QtCore
import picamera

#Importing pyqt classes generated by pyuic
from ui.image_preview import Ui_Form
from ui.dashboard import Ui_Dashboard
#from ui.average import Ui_Average


from datetime import datetime
import time

#import Adafruit_DHT
import threading
import os
import numpy as np

__author__ = "Prithvi Teja Veeravalli"
__copyright__ = "Copyright (C) 2017 by Prithvi Teja Veeravalli"
#
# Redistribution, modification or use of this software in source or binary
# forms is permitted as long as the files maintain this copyright. Users are
# permitted to modify this and use it to learn about the field of embedded
# software. Prithvi Teja Veeravalli, and the University of Colorado
# are not liable for any misuse of this material.


imageName = 'photo.jpg'
th = None
#camera = picamera.PiCamera()
th_stop = [False]

def searchPersonGroup(subscription_key, uri_base, personGroupId, faceIdList):

        request_headers = {
                'Content-Type': 'application/json',
                'Ocp-Apim-Subscription-Key': subscription_key,
        }

        request_parameters = {
        }

        body = {
                'personGroupId': personGroupId,
                'faceIds': faceIdList,
                'confidencethreshold':0.6
        }

        try:
                response = requests.request('POST', uri_base + '/face/v1.0/identify', json=body, data=None, headers=request_headers, params=request_parameters)
                #print ('Response:')
                parsed = json.loads(response.text)
                if response.status_code != 200:
                        print (json.dumps(parsed, sort_keys=True, indent=2))
                        print(response.reason)
                        return []
                        
                else:
                        #parsed_list = [parsed]
                        matched_person_list = []
                        i = 0
                        length = len(parsed)
                        list_length = 0
                        matched_faces_json = parsed[0]
                        print('\n\n\n')
                        print(parsed)
                        print('Parsed Value')
                        while i<length:
                                matched_faces_json = parsed[i]
                                matched_faces = matched_faces_json['candidates']
                                
                                if matched_faces:
                                
                                        matched_person_json = matched_faces[0]
                                        matched_person = matched_person_json['personId']
                                        print('India')
                                        print(matched_person)
                                        matched_person_list.append(matched_person)
                                        list_length+=1
                                i+=1
                        if list_length>0:
                                return matched_person_list[0]
                        else:
                                return []

        except Exception as e:
                print('Error:')
                print(e)
                sys.exit(1)

def retrievePersonInformation(personId):
        subscription_key = '2dc39742626043b697f1407a53f2c104'
        uri_base = 'https://westcentralus.api.cognitive.microsoft.com'
        request_headers = {
                'Ocp-Apim-Subscription-Key': subscription_key,
        }
        request_parameters = {
        }

        personGroupId = 'super-project'

        try:
                response = requests.request('GET', uri_base + '/face/v1.0/persongroups/%s/persons/%s'% (personGroupId, personId), json=None, data=None, headers=request_headers, params=request_parameters)
                print ('Response:')
                parsed = json.loads(response.text)
                # Since the json returned in the response body of Face API is in the form of a list of 1 JSON object. We get the json object using the below command  
                parsed_name = parsed['name']
                #print (parsed_name)

        except Exception as e:
                print('Error:')
                print(e)
        return parsed_name



                
def faceRecognition(tab):
        subscription_key = '2dc39742626043b697f1407a53f2c104'

        uri_base = 'https://westcentralus.api.cognitive.microsoft.com'

        personGroupId = 'super-project'

        request_headers = {
            'Content-Type': 'application/octet-stream',
            'Ocp-Apim-Subscription-Key': subscription_key,
        }

        request_parameters = {
            'returnFaceId': 'true',
            'returnFaceLandmarks': 'false',
            'returnFaceAttributes': 'age,gender',
        }

        image = open("/home/pi/super-project/AccessPi/photo.jpg", "rb")

#body = {'url': 'https://i.enkimd.com/BIHYkP27lew1LcPoevdib7VEc34=/800x0//images/2017/03/35752a7d753eab50f667be70b98814f3.jpg'}
        body = image.read()
        try:
                response = requests.request('POST', uri_base + '/face/v1.0/detect', json=None, data=body, headers=request_headers, params=request_parameters)
                parsed = json.loads(response.text)
                if response.status_code != 200:
                        print(response.reason)
                        error = parsed['error']
                        error_message = error['message']
                        print(error_message)
                        return 'error'
                else:
                        print ('Response:')
                        # Since the json returned in the response body of Face API is in the form of a list of 1 JSON object. We get the json object using the below command
                        length = len(parsed)
                        print(length)
                        if parsed:
                                print('India')
                                print(parsed)
                        i = 0
                        faceIdList = []
                        if parsed:
                                while i<length: 
                                        parsed_json = parsed[i]
                                        print(parsed_json)
                                        print (json.dumps(parsed, sort_keys=True, indent=2))
                                        faceIdList.append(parsed_json['faceId'])
                                        i += 1
                                        print(faceIdList)
                                
                                matched_faces = searchPersonGroup(subscription_key, uri_base, personGroupId, faceIdList)
                                length = len(matched_faces)
                                print('Matched faces')
                                print(matched_faces)
                                print(length)
                                if matched_faces:
                                        matched_person_name = retrievePersonInformation(matched_faces)
                                        #print(matched_person_name)
                                        return matched_person_name
                                        #print (json.dumps(matched_faces, sort_keys=True, indent=2))
                                        #print(response.reason)
        #**********************Gotta obtain and Return a Person List to larger function*******************************
        #**********************Gotta obtain and Return a Person List to larger function*******************************
                                else:
                                        print('No Matches found')
                                        return 'Fail'
        #***********************Gotta retain empty Person List********************************************************
        #***********************Gotta retain empty Person List********************************************************
                        else:
                                print('No Face Detected')
                                return 'No Face'
                        
        except Exception as e:
                print('Error:')
                print(e)
                return []


#This class is used to display the image preview
class Form(Ui_Form, QWidget):
        #This function is used to init the homepage tab
        def __init__(self, callerObject):
                QWidget.__init__(self)
                self.setupUi(self)
                self.capturePhoto.clicked.connect(callerObject.recognizeFace)
                       
#                self.refreshPushButton.clicked.connect(self.refreshRead)
#                self.averageButton.clicked.connect(callerObject.aver)                
#                self.quitButton.clicked.connect(callerObject.closeApp)


                
                #time.sleep(1)
                #camera.capture(imageName)
                #time.sleep(0.01)
                #camera.close()
class Dash(Ui_Dashboard, QWidget):

        #This function is used to init the Average tab
        def __init__(self, callerObject):
                QWidget.__init__(self)
                self.setupUi(self)
                self.registerButton.clicked.connect(self.registerUser)
                #self.refreshPushButton.clicked.connect(self.refreshRead)
                #self.quitButton.clicked.connect(callerObject.closeAvgTab)
        def registerUser():
                print('Registering User')

                

#This class is used to setup the main window and set the size of the main window
class App(QMainWindow):
        def __init__(self):
                QMainWindow.__init__(self)
                self.setGeometry(200, 200, 700, 500)
                #self.resize(400,350)

                self.windowWidget = OuterWidget(self)
                self.setCentralWidget(self.windowWidget)

                self.setWindowTitle('Facial Recognition')
                
                self.show()

def on_publish(client, userdata, mid):
	print ("Message Published...")


#This class setsup and outer widget which contains multiple tabs i.e. multiple widgets which are tabs in it.
class OuterWidget(QWidget):

        def __init__(self, callerObject):
                super(QWidget, self).__init__(callerObject)

                self.caller = callerObject

                self.layout = QVBoxLayout(self)
                
                self.tabs = QTabWidget()
                self.tab1 = Form(self)
                #self.tab2 = Dash(self)

                self.imageLabel = QLabel(self.tab1)
                self.imageLabel.setGeometry(50, 50, 510, 310)
                self.imageLabel.setPixmap(QtGui.QPixmap(os.getcwd() + "/" + imageName))


                self.tabs.setTabsClosable(True)
                self.tabs.tabCloseRequested.connect(self.tabs.removeTab)
                

                self.tabs.addTab(self.tab1, "Image Capture")

                self.layout.addWidget(self.tabs)
                self.setLayout(self.layout)
        def recognizeFace(self):
#                th_stop[0].set()
                time.sleep(1)
                username = faceRecognition(self)
                #This is used to handle the case if the image size too small error is returned
                if username == 'error':
                        _translate = QtCore.QCoreApplication.translate
                        self.tab1.label.setText(_translate("Form", "*Picture is not upto the required quality. It could be due to poor ambient light "))
                        self.tab1.label.setStyleSheet('color: red')
                        return 1
                #This is used to handle the case if there is no face in the picture frame
                elif username == 'No Face':
                        _translate = QtCore.QCoreApplication.translate
                        self.tab1.label.setText(_translate("Form", "*No face detected. Please position the camera pointing towards your face"))
                        self.tab1.label.setStyleSheet('color: red')
                        return 1
                elif username == 'Fail':
                        _translate = QtCore.QCoreApplication.translate
                        self.tab1.label.setText(_translate("Form", "*Authentication Failed. You have been denied access"))
                        self.tab1.label.setStyleSheet('color: red')
                        return 1
                length = len(username)
                print('Before Independence')
                self.tab2 = Dash(self)
                print('After Independence')
                if length>0:         
                        time.sleep(1)
                        _translate = QtCore.QCoreApplication.translate
                        #p = 'Hello {}'. format(username)
                        print('India')
                        self.tab2.label.setText(_translate("Dash", "Hello Prithvi"))
                        self.tab2.label_2.setText(_translate("Dash", "You have been granted access to Book My Show, \n"
"a Secure Voice Assisted movie show booking website"))
                        self.tab2.label_3.setText(_translate("Dash", "Do you want to add a new user?"))

                        #p = 'Authentication Successful Welcome {}'. format(username)
                        #self.tab2.textDisplay.setText(p)
                        print(username)

                averageIndex = self.tabs.addTab(self.tab2, "Dashboard")
                self.tabs.setCurrentIndex(averageIndex)
                self.tabs.removeTab(averageIndex-1)
                
                
                
    
#This function in a dedicated thread for itself which periodically captures images to show the user a preview before the capture.
def threadFunction(app, camera, th_stop):
        
        while 1:
                initial = 1
                if not th_stop[0].wait(0):
                        camera.capture(imageName)
                        app.windowWidget.imageLabel.setPixmap(QtGui.QPixmap(os.getcwd() + "/" + imageName))
                        app.windowWidget.imageLabel.setScaledContents(True)
                        app.windowWidget.imageLabel.setSizePolicy( QSizePolicy.Ignored, QSizePolicy.Ignored)
                else:
                        if initial == 1:
                                time.sleep(1)
                                camera.capture(imageName)
                                time.sleep(0.1)
                                camera.close()
                                initial = 0
                                
                time.sleep(0.01)

            #os.getcwd() + "/" +


def main():
        app = QApplication(sys.argv)

        ex = App()
        camera = picamera.PiCamera()
        th_stop[0] = threading.Event()
        print(th_stop)
        th = threading.Thread(target = threadFunction, args = (ex, camera, th_stop))
        th.start()
        sys.exit(app.exec_())


        
 
if __name__ == "__main__":
        main() 
        


